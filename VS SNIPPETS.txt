///////////////////////////////////////////////////////
//                                                   //
//        text file full of code snippets            //
//                                                   //
//                                                   //
///////////////////////////////////////////////////////


/////////////////////////////
//  JAVASCRIPT TYPESCRIPT  //
/////////////////////////////



//console.log
console.log('khdsbrf');


//bubble sort
function bubbleSort(arr) {
  let n = arr.length;
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        let temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
  return arr;
}

// Example usage:
const arr = [];
console.log(bubbleSort(arr));

// Navbar 
import React from 'react';
import Link from 'next/link';
import styles from './Navbar.module.css';

const Navbar: React.FC = () => {
  return (
    <nav className={styles.navbar}>
      <ul className={styles.navList}>
        <li className={styles.navItem}>
          <Link href="/" className={styles.navLink}>Home</Link>
        </li>
        <li className={styles.navItem}>
          <Link href="/about" className={styles.navLink}>About</Link>
        </li>
        <li className={styles.navItem}>
          <Link href="/services" className={styles.navLink}>Services</Link>
        </li>
        <li className={styles.navItem}>
          <Link href="/contact" className={styles.navLink}>Contact</Link>
        </li>
      </ul>
    </nav>
  );
};

export default Navbar;


// For Loop
for (let i = 0; i < 10; i++) {
  console.log(i);
}


// While Loop
let i = 0;
while (i < 10) {
  console.log(i);
  i++;
}


// Do While Loop
let i = 0;
do {
  console.log(i);
  i++;
} while (i < 10);



//web card component

import React from 'react';
import styles from './WebCard.module.css';

interface WebCardProps {
  title: string;
  description: string;
}

const WebCard: React.FC<WebCardProps> = ({ title, description }) => {
  return (
    <div className={styles.card}>
      <h2>{title}</h2>
      <p>{description}</p>
    </div>
  );
};

export default WebCard;


// Web Card Playing a Video (components/VideoCard.tsx)

import React from 'react';
import styles from './VideoCard.module.css';

interface VideoCardProps {
  title: string;
  videoUrl: string;
}

const VideoCard: React.FC<VideoCardProps> = ({ title, videoUrl }) => {
  return (
    <div className={styles.card}>
      <h2>{title}</h2>
      <video width="320" height="240" controls>
        <source src={videoUrl} type="video/mp4" />
        Your browser does not support the video tag.
      </video>
    </div>
  );
};

export default VideoCard;

// Search Box (components/SearchBox.tsx)

import React, { useState } from 'react';
import styles from './SearchBox.module.css';

const SearchBox: React.FC = () => {
  const [query, setQuery] = useState('');

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setQuery(event.target.value);
  };

  const handleSearch = () => {
    console.log('Search query:', query);
  };

  return (
    <div className={styles.searchBox}>
      <input
        type="text"
        value={query}
        onChange={handleInputChange}
        placeholder="Search..."
        className={styles.input}
      />
      <button onClick={handleSearch} className={styles.button}>Search</button>
    </div>
  );
};

export default SearchBox;


// Web Card with a Picture (components/PictureCard.tsx)

import React from 'react';
import styles from './PictureCard.module.css';

interface PictureCardProps {
  title: string;
  imageUrl: string;
  description: string;
}

const PictureCard: React.FC<PictureCardProps> = ({ title, imageUrl, description }) => {
  return (
    <div className={styles.card}>
      <img src={imageUrl} alt={title} className={styles.image} />
      <h2>{title}</h2>
      <p>{description}</p>
    </div>
  );
};

export default PictureCard;


//Index Page (pages/index.tsx)

import React from 'react';
import Head from 'next/head';
import Link from 'next/link';
import styles from '../styles/Home.module.css';

const Home: React.FC = () => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Home Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <Link href="https://nextjs.org"><a className={styles.link}>Next.js!</a></Link>
        </h1>
      </main>
    </div>
  );
};

export default Home;


// hooks/useCustomHook.ts

import { useState, useEffect } from 'react';

const useCustomHook = () => {
  const [state, setState] = useState<string | null>(null);

  useEffect(() => {
    // Simulate fetching data
    setTimeout(() => {
      setState('Hello from custom hook!');
    }, 1000);
  }, []);

  return state;
};

export default useCustomHook;
//Custom Hook


// components/Layout.tsx

import React from 'react';
import Head from 'next/head';
import Navbar from './Navbar';
import styles from './Layout.module.css';

interface LayoutProps {
  children: React.ReactNode;
  title?: string;
}

const Layout: React.FC<LayoutProps> = ({ children, title = 'Default Title' }) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className={styles.main}>{children}</main>
    </div>
  );
};

export default Layout;

// pages/data.tsx

import React from 'react';
import useSWR from 'swr';
import Layout from '../components/Layout';

const fetcher = (url: string) => fetch(url).then((res) => res.json());

const DataPage: React.FC = () => {
  const { data, error } = useSWR('/api/data', fetcher);

  if (error) return <div>Failed to load data</div>;
  if (!data) return <div>Loading...</div>;

  return (
    <Layout title="Data Page">
      <h1>Data Page</h1>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </Layout>
  );
};

export default DataPage;

// pages/api/data.ts

import type { NextApiRequest, NextApiResponse } from 'next';

type Data = {
  message: string;
};

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ message: 'Hello from API' });
}

// Environment Variables

module.exports = {
  env: {
    CUSTOM_API_URL: process.env.CUSTOM_API_URL,
  },
};


// components/EnvComponent.tsx

import React from 'react';

const EnvComponent: React.FC = () => {
  return <div>API URL: {process.env.CUSTOM_API_URL}</div>;
};

export default EnvComponent;


//Dynamic Routes

import { useRouter } from 'next/router';
import Layout from '../../components/Layout';

const Post: React.FC = () => {
  const router = useRouter();
  const { id } = router.query;

  return (
    <Layout title={`Post ${id}`}>
      <h1>Post {id}</h1>
    </Layout>
  );
};

export default Post;


//Error Handling
import React, { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

class ErrorBoundary extends Component<Props, State> {
  state: State = {
    hasError: false,
  };

  static getDerivedStateFromError(_: Error): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;


//Protected Route (with authentication)

import React from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '../context/AuthContext';

const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useAuth();
  const router = useRouter();

  React.useEffect(() => {
    if (!user) {
      router.push('/login');
    }
  }, [user, router]);

  if (!user) {
    return <div>Loading...</div>;
  }

  return <>{children}</>;
};

export default ProtectedRoute;

//Auth Context
import React, { createContext, useContext, useState, useEffect } from 'react';

interface AuthContextProps {
  user: any;
  login: () => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextProps | undefined>(undefined);

export const AuthProvider: React.FC = ({ children }) => {
  const [user, setUser] = useState<any>(null);

  useEffect(() => {
    // Simulate fetching user
    const fakeUser = { name: 'John Doe' };
    setUser(fakeUser);
  }, []);

  const login = () => {
    setUser({ name: 'John Doe' });
  };

  const logout = () => {
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


//AuthProvider Wrapper (pages/_app.tsx)

import React from 'react';
import type { AppProps } from 'next/app';
import { AuthProvider } from '../context/AuthContext';
import '../styles/globals.css';

const MyApp: React.FC<AppProps> = ({ Component, pageProps }) => {
  return (
    <AuthProvider>
      <Component {...pageProps} />
    </AuthProvider>
  );
};

export default MyApp;





function bubbleSort(arr) {
  let n = arr.length;
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        let temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
  return arr;
}

// Example usage:
const arr = [];
console.log(bubbleSort(arr))


















































